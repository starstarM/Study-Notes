1.Nginx介绍
Nginx与Apache对比
量级：Nginx轻量级；Apache重量级
并发请求：Nginx异步非阻塞，高并发下，保持低资源低消耗；Apache阻塞，占用资源多
设计理念：Nginx模块化设计；Apache编写模块相对简单
模块：Nginx模块较少；Apache模块数量很多
性能：Nginx性能强大，且占用资源更少；Apache性能较差，使用资源多
配置：Nginx配置简单；Apache相对复杂
代理功能：Nginx代理强大；Apache代理较差


Nginx为什么没有取代Apache？
Nginx与Apache侧重点不同
  Apache：程序内置很多模块，无需借助其他模块就能对几乎所有的web类型应用进行支持。Apache的侧重点在稳定上。
  Nginx：Nginx在静态文件的处理，高并发方面比较有优势。Nginx侧重在轻量高效上。
  很多时候Apache和Nginx是配合使用的，Nginx配置在Apache前面，用它挡掉静态文件的请求，Nginx处理不了的动态内容再转发给Apahce来处理。


 Nginx的功能特性
 HTTP服务：
 	HTTP代理服务器，反向代理服务器，缓存加速，负载均衡，包过滤，支持SSL等；
 高级HTTP服务：
 	自定义配置，支持虚拟主机，URI重定向，错误码重定向，支持网络监控；
 邮件服务：
 	支持IMAP/POP3代理服务功能，支持内部SMTP代理服务功能；


2.Ngixn安装
安装
直接yum install 安装现有操作系统预制版本
源码安装，官网下载源码，参考文档安装

启停控制
Nginx启停是通过信号机制来实现的，Nginx服务在运行时，会保持一个主进程或者多个worker process作进程，我们通过控制Nginx的主进程就可以控制服务的启停了。Nginx的进程号存放在nginx.pid文件中，默认在logs目录下。


3.Nginx配置文件
整体结构
	全局块：
		·主要设置一些影响Nginx服务器整体运行的配置指令，通常包括：运行nginx服务的用户及用户组，work process数,nginx pid文件存放路径，日志存放路径和类型，以及配置文件引入等；
	events块：
		·events块涉及的指令主要影响nginx服务与用户的网络连接，常用的是为每个work process设置最大连接数；
	http块：
		·文件引入，MIME-Type定义，日志定义，是否使用sendfile传输文件，连接超时时间，单连接请求上限等；
		·http块包括server块，server块中又可以包括location块；
		·包括http全局块；
	server块：
		·与http块相同，server块可以有自己的全局变量；
		·配置项最常见的是本虚拟主机监听配置和虚拟主机名称和IP配置；
	location块：
		·每个server块中可以包含多个location块；
		·location块主要的作用，基于nginx服务器接受到的请求进行匹配，对待定的请求进行处理，地址定向，数据缓存和应用控制等；

location uri规则
语法：
	location [ = | ~ | ~* | ^~ ] uri {...}
	location @name {...}

	= 精准匹配
	~ 正则匹配
	~* 正则匹配，不区分大小写
	^~ 前缀匹配
	指令为空 正常匹配
	URI为/ 全匹配
优先级：
	精确匹配>前缀匹配>正则匹配>正常匹配>全匹配


4.Nginx架构分析
服务模块化涉及
	模块化设计
		·单一职责
		·高内聚，低耦合
	Nginx模块化结构
		核心模块
			·是Nginx服务正常运行的基础模块，主要负责进程管理，权限控制，错误日志记录，配置解析等，还包括一些用于请求事件必须的功能，事件驱动机制，正则表达式解析；
		标准HTTP模块
			·支持标准的HTTP功能
		可选HTTP功能
			·用于扩展标准的HTTP功能
		邮件服务模块
			·支持Nginx的邮件服务
		第三方模块
			·由开发者自行开发的功能模块

web请求常见的三种机制
多进程方式（Apache采用多进程）
	优点：设计简单，进程间相互独立，客户端请求过程彼此不受到干扰，当子进程产生问题时，不会影响其他的进程，并且当子进程退出时其占用的资源会被操作系统回收。
	缺点：子进程创建时需要进行内存复制操作，这样一来会产生一定的额外开销，大并发请求时，会因为频繁进行内存复制等操作造成系统性能下降。
多进程方式（IIS服务）
	优点：服务每当接受到一个请求，会由服务主程序派生一个线程出来，这样效率得到提升，并且产生一个线程远比产生一个进程开销要小，因此资源可以有效的利用。
	缺点：多个线程 共享同一个内存空间，彼此之间相互影响，这对打开提出很高的要求，要严格按照一定的规范，开发者自行对内存进行管理，增加出错风险，服务器长时间运行，错误也会不断增加，需要通过定期检查和重启服务器。
异步方式
	·同步阻塞：
		发送方向接收方发送请求后，一直等待响应；接收方处理请求时进行io，如果不能立马返回，会一直等待返回结果，然后响应发送方，期间不进行 其他工作。
	·同步非阻塞：
		发送发向接收方发送请求后，一直等待响应；接收方处理请求是进行io，如果不能立马返回，就去处理其他请求，每过一段时间去查看io是否完成。
	·异步阻塞：
		发送方向接收方发送请求后，不用等待响应，可以处理其他工作；接收方处理请求时进行io，不能立马返回，就一直等待，期间不进行其他工作。
	·异步非阻塞：
		发送发向接收方发送请求后，不用等待响应，去处理其他事情；接收方处理请求io时，如果不能立马得到结果，就立马返回去做其他事情。当io完成后，通知接收方来处理。





