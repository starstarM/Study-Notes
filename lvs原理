lvs+keepalved配置
Lvs配置：
环境：
	·Director: (eth0:192.168.19.128 vip eth0:192.168.19.100)
	·Real Server1: (eth0:192.168.19.130 vip lo:192.168.19.100)
	·Real Server2: (eth0:192.168.19.131 vip lo:192.168.19.100)
安装：
	·两台Real Server上安装nginx并测试
	·Director上安装ipvsadm，安装完利用lsmod | grep ip_vs 检测是否安装成功
配置Director：
	·ip addr add 192.168.19.100/24 dev eth0 # 将vip绑定在eth0网卡
	·ipvsadm --set 30 5 60 # 设置tcp、tcpfin、udp连接超时时间
	·ipvsadm -A -t 192.168.19.100:80 -s wrr -p 20 # 添加虚拟服务(-A)
	·ipvsadm -a -t 192.168.19.100:80 -r 192.168.19.130:80 -g -w 1 # 将虚拟服务关联到RS1上(-a)
	·ipvsadm -a -t 192.168.19.100:80 -r 192.168.19.131:80 -g -w 1 # 将虚拟服务关联到RS2上(-a)

	·ipvsadm命令参数
		-C 清空整个表
		-A 添加一个虚拟服务
		-t 指定一个地址，一定是ip+端口
		-s 调度算法
		-a 添加一个real server
		-m NAT模式
		-g DR模式，默认
		-d 删除一个real server
		-p 会话保持功能
		-w 权重
		-i tunnel模式
配置Real Server：
	·将vip绑定在lo网卡上
		ip addr add 192.168.19.100/32 dev lo
	·修改内核参数抑制ARP响应
		添加以下内容到/etc/sysctl.conf:
			net.ipv4.conf.all.arp_ignore = 1
			net.ipv4.ocnf.all.arp_announce = 2
		执行sysctl -p更新配置


Lvs原理
Lvs组成：
	Lvs由两部分程序组成：ipvs和ipvsadm
	·ipvs(ip virtual server): 在内核空间工作的程序，负责实现调度
	·ipvsadm：工作在用户空间的程序，负责为ipvs内核框架编写规则，定义集群服务和后端真实服务器
Lvs基本原理：
	1.当用户向负载均衡调度器(Director Server)发起请求，调度器将请求发往内核空间。
	2.PREROUTING链会首先接收到请求，判断目标IP是否是本机IP，如果是将数据发往INPUT链。
	3.IPVS工作在INPUT链上，当用户请求到达INPUT时，IPVS会将 用户请求和自己定义好的集群服务进行对比，若请求是定义的集群服务，此时IPVS会修改 数据包的目标IP和端口，然后将数据包发往POSTROUTING链。
	4.POSTROUTING链收到数据包后发现IP为自己后端服务器，此时通过选路，将数据包最终发送给后端服务器。
Lvs/NAT：
原理：
	1.当用户请求到达DS，此时请求的数据报文会先到内核空间的PREROUTING链。此时报文的源IP为CIP，目标IP为VIP。
	2.PREROUTING检查发现数据包的目标IP是本机，将数据包发往INPUT链。
	3.IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器IP，然后将数据包发往POSTROUTING链。此时报文的源IP为CIP，目标IP为RIP。
	4.POSTROUTING链通过选路，将数据包发送给RS。
	5.RS比对发现目标IP为自己，开始构建响应报文发回给DS。此时报文的源IP为RIP，目标IP为CIP
	6.DS在响应客户端前，此时会将源IP地址修改为自己的VIP地址，然后响应给客户端。此时报文的源IP为VIP，目标IP为CIP。
模型特性：
	·RS应该使用私有地址，RS网关必须指向DIP
	·DIP和RIP必须在同一网段内
	·请求和响应报文都需要经过DS，高负载场景中，DS易成为性能瓶颈
	·支持端口映射
	·RS可以使用任意操作系统

Lvs/DR:
原理：
	1.当用户请求到达DS，该请求首先到内核空间的PREROUTEING链。此时该数据的源IP为CIP，目标IP为VIP
	2.PREROUTING检查该数据包IP是否是本机，若是将数据包发送到INPUT链。
	3.在INPUT链上工作的IPVS比对数据包请求的服务是否为集群服务，若是，将请求报文中的源MAC地址修改为DIP的MAC地址，将目标MAC地址修改为RIP的MAC地址，然后将数据包发送到POSTROUTING链。此时源IP为CIP，目的IP为VIP，仅修改了源MAC地址为DS的MAC地址，目的MAC地址为RS的MAC地址。
	4.由于DS和RS在同一网络中，所以是通过二层来传输。POSTROUTING链检查MAC地址为目标MAC的RS发至该RS。
	5.RS发现请求报文的MAC地址是自己的MAC地址，且目标IP为自身lo网卡的IP。处理该请求。处理完成后，将响应报文通过lo接口传送给eth0网卡然后向外发出。此时源IP为VIP，目标IP为CIP。源MAC为VIP-MAC，目的MAC为CIP—MAC。
	6.响应报文最终到达客户端
模型特性：
	·RS和DS必须在同一网络中
	·所有请求报文都通过DS，但是响应报文不通过DS
	·不支持地址转换，也不支持端口映射
为什么要在RS的lo接口上配置VIP？
	·数据包到达Real Server时，Real Server验证这个数据包是不是自己处理需要符合两个要求：1.IP是自己，此时lo上的VIP就起到了作用。2.MAC是否是自己。

八种LVS调度算法：
	·rr 轮叫调度
		这种算法是最简单的，就是按依次循环的方式将请求调度到不同的服务器上，该算法最大的特点就是简单。轮询算法假设所有的服务器处理请求的能力都是一样的，调度器会将所有的请求平均分配给每个真实服务器，不管后端 RS 配置和处理能力，非常均衡地分发下去。
	·wrr 加权轮叫
		这种算法比 rr 的算法多了一个权重的概念，可以给 RS 设置权重，权重越高，那么分发的请求数越多，权重的取值范围 0 – 100。主要是对rr算法的一种优化和补充， LVS 会考虑每台服务器的性能，并给每台服务器添加要给权值，如果服务器A的权值为1，服务器B的权值为2，则调度到服务器B的请求会是服务器A的2倍。权值越高的服务器，处理的请求越多。
	·lc 最少连接
		这个算法会根据后端 RS 的连接数来决定把请求分发给谁，比如 RS1 连接数比 RS2 连接数少，那么请求就优先发给 RS1 
	·wlc 加权最少连接
		比lc多一个权重属性
	·lblc 基于局部性的最少连接调度算法
		这个算法是请求数据包的目标 IP 地址的一种调度算法，该算法先根据请求的目标 IP 地址寻找最近的该目标 IP 地址所有使用的服务器，如果这台服务器依然可用，并且有能力处理该请求，调度器会尽量选择相同的服务器，否则会继续选择其它可行的服务器。
	·lblcr 复杂的基于局部性最少的连接算法
		记录的不是要给目标 IP 与一台服务器之间的连接记录，它会维护一个目标 IP 到一组服务器之间的映射关系，防止单点服务器负载过高。

	·dh 目标地址散列调度算法
		该算法是根据目标 IP 地址通过散列函数将目标 IP与服务器建立映射关系，出现服务器不可用或负载过高的情况下，发往该目标IP的请求会固定发给该服务器。

	·sh 源地址散列调度算法
		与目标地址散列调度算法类似，但它是根据源地址散列算法进行静态分配固定的服务器资源。
