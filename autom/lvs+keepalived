## lvs keepalived
### keepalived
###### keepalived简介：   
>keepalived是linux下一个轻量级的高可用解决方案。keepalived起初是为lvs设计的。专门用来监控集群系统中各个服务节点的状态。它根据TCP/IP参考模型的第三、四、五层交换机制检测每个服务器节点的状态。如果某个服务器节点出现异常，keepalived将检测出来，并将出现故障的服务节点从集群系统中剔除。但keepalived会出现单点故障，后来keepalived加入VRRP协议，解决了单点故障。
###### VRRP协议与工作原理   
>在现实网络环境中，主机之间通信都是通过配置静态路由或默认网关来完成的。而主机之间的路由器一旦发生故障，通信就会失效，因此这种通信模式中，路由器就成了一个单点瓶颈。VRRP的引入解决了这个问题。VRRP协议是一种主备模式的协议，通过VRRP可以在网路发生故障时透明的进行设备切换而且不影响主机之间的数据通信。   
VRRP可以将两台或者多台物理路由器设备虚拟成一个虚拟路由，这个虚拟路由通过虚拟IP对外提供服务。而在虚拟路由内部多个物理路由协同工作，但同一时间只有一台物理路由器对外提供服务，这台路由器被称作主路由器（Master角色）。一般情况下Master是由选举算法产生，它对外提供各种网络功能。其他物理路由无虚拟IP也不对外提供网络服务，仅接受Master的VRRP状态通告信息。这些路由器称为Backup角色。当Master出现错误Backup进行重新选举，继续提供服务，整个切换对用户来说是透明的。   
Master的路由器会一直发送VRRP数据包，处于Backup的路由器只会接受Master发来的报文信息，用来监控Master的运行状态，当backup无法收到Master发过来的信息后，于是认定Master出现故障，接着多台Backup会进行选举，优先级高的Backup会成为新的Master。这种选举切换很快，因而保证了服务的高可用性。
###### keepalived的工作原理
>keepalived工作在TCP/IP参考模型的三层、四层、五层也就是网络层、传输层和应用层。根据TCP、IP参数模型隔层所能实现的功能，keepalived运行机制如下：    
>>网络层：   
keepalived在网络层采用ICMP协议，向服务器集群中的每一个节点发送一个ICMP数据包（类似Ping），如果某个节点没有返回响应数据包，那么可以认为该节点发生了故障，keepalived
将报告这个节点失效，并从集群中剔除故障节点。   
传输层：   
传输层提供了两个主要的协议，TCP和UDP协议。TCP提供可靠的数据传输服务，要获得TCP服务，需
要在客户端的一个端口和服务器的一个端口上建立连接。keepalived在传输层利用了TCP协议的端口
连接和端口扫描来判断集群节点的端口是否正常。对于常见的WEB服务器80端口或者ssh服务的22端口
。keepalievd一旦在传输层检测到这些端口没有返回数据，就认为这些端口发生异常，然后剔除该节点。   
应用层：   
用户可以通过自定义keepalived工作方式，keepalived将根据用户的设定检测各种程序或者服务是否正常。
###### keepalived体系结构     
>keepalived主要由三个模块，分别是core、check和vrrp。   
core：core是keepalived的核心，负责主进程的启动维护和加载配置。   
check：健康检查。   
vrrp：实现VRRP协议   

### LVS   
###### 负载均衡lvs介绍   
>load balance（负载均衡）。LB集群的架构和原理很简单=，当用户请求过来时，会分发到Director Server
上，然后将请求根据设置好的调度算法均衡地分发到后端服务器上。   
LVS是Linux Virtual Server的简称。也就是虚拟linux服务器，现在lvs已经是linux内核标准的一部分。


